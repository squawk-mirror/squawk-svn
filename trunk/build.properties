#
# Copyright  1990-2007 Sun Microsystems, Inc. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version
# 2 only, as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License version 2 for more details (a copy is
# included at /legal/license.txt).
# 
# You should have received a copy of the GNU General Public License
# version 2 along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
# 
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 or visit www.sun.com if you need additional
# information or have any questions.
#
# Squawk build options
#
# Set to "false" all conditional sections not to be included.
#

##################################################################
#                 Conditional compilation flags                  #
##################################################################

# Change to true to support Java 5 Syntax
JAVA5SYNTAX=false

# Do not change the following entries.
SQUAWK=true
EXCLUDE=false
TRUE=true
FALSE=false

# PLATFORM TYPE may be one of:
#   BARE_METAL - Squawk runs on the bare metal, implementing interrupts, timers, etc.
#   DELEGATING - Squawk delegates all IO to another JVM, via JNI
#   NATIVE     - Squawk runs on an OS, and calls native OS routines for IO, etc.
#   SOCKET     - Squawk delagates all IO to another JVM, via a socket
#
# The builder will synthesize definitions of four additional properties: PLATFORM_TYPE_BARE_METAL,
# PLATFORM_TYPE_DELEGATING, PLATFORM_TYPE_NATIVE, and PLATFORM_TYPE_SOCKET, which can be used 
# by the Java and C preprocessors to conditionally compile code.
# Uncomment one of the following definitions:
#PLATFORM_TYPE=BARE_METAL
#PLATFORM_TYPE=DELEGATING
PLATFORM_TYPE=NATIVE
#PLATFORM_TYPE=SOCKET

AUTOGEN_JNA_NATIVES=false

# Set true for the split version of Squawk with support for
# asychronous handling of interrupts.
KERNEL_SQUAWK=false

# Set true on 64 bit systems (same as the romizer -64 option).
SQUAWK_64=false

# Parameter pushing convention
REVERSE_PARAMETERS=true

# Enables use of com.sun.squawk.util.Tracer (and defines Klass.TRACING_ENABLED)
TRACING_ENABLED=false

# Enables use of com.sun.squawk.util.Assert (and defines Klass.ASSERTIONS_ENABLED)
ASSERTIONS_ENABLED=false

# Set true to enable miscellaneous debug code (and define Klass.DEBUG_CODE_ENABLED)
DEBUG_CODE_ENABLED=false

# Set true to enable verification of bytecodes once they have
# translated into the suite format
SUITE_VERIFIER=false

# Set true for various stats in the translator to be available.
J2ME.STATS=true

# Makes the macroized version of the Squawk executable. This can also
# be enabled with the '-mac' switch to the builder
MACROIZE=false

# Makes the production version of the Squawk executable. This can also
# be enabled with the '-prod' switch to the builder
PRODUCTION=false

# Makes the optimization options of the Squawk executable.  This can also
# be enabled with the '-o1', '-o2', '-o3' switches to the builder
O1=false
O2=false
O3=false

# Specifies the class implementing com.sun.squawk.GarbageCollector that is to be used.
#GC=com.sun.squawk.Lisp2Collector
GC=com.sun.squawk.Lisp2GenerationalCollector
#GC=com.sun.squawk.CheneyCollector

#Disable support for interpreted GC. Disables the -interpgc flags as well.
NATIVE_GC_ONLY=true

# Smart monitor releasing
SMARTMONITORS=true

# TEMP hack for problem in compiler
INCLUDE_EXECUTECIO_PARMS=false

# Floating point support
FLOATS=true

# If true, verify signatures of suites.
VERIFY_SIGNATURES=false

# Use native C sha1 for signature verification. This triggers compiling of everything in vm/util
NATIVE_VERIFICATION=true

# Exclusivly Verification using native C sha1 only. Don't include suite signature verification java code
NATIVE_VERIFICATION_ONLY=true



# Include classes and members added in CLDC 1.1 (apart from floating point
# stuff which is controlled by the FLOATS property)
CLDC1.1=true

# Include classes and members that are part of JDK1.0 but not CLDC 1.0a or CLDC 1.1
JDK1.0=false

# Include classes and members that are part of JAVA_SE but not CLDC 1.0a or CLDC 1.1
JAVA_SE=false

# Include full activation slot clearing analysis
FULL_SLOT_CLEARING_ANALYSIS=false

# Trust the slot clearing analysis in the slow VM
TRUST_SLOT_CLEARING=true

# Checking code to see if the slot clearing analysis is correct
CHECK_SLOT_CLEARING=false

# Enable in cases where channel I/O read operations can be improved.
# (This speeds up class loading by about 30% when -Xioport is used.)
BUFFERCHANNELINPUT=false

# Enables tracing of the heap's layout at each collection to squawk.heap.
# This will also be enabled if J2ME.DEBUG is true
J2ME.HEAP_TRACE=false

# Disable message reuse
REUSEABLE_MESSAGES=false

# Enables memory access type checking in the VM
TYPEMAP=false

# Enable support for flash memory
FLASH_MEMORY=false

# Enable support for dynamically loading classes into squawk (enables translator support)
# When false, can only load classes from suites.
# This should be false whan FLASH_MEMORY is true.
ENABLE_DYNAMIC_CLASSLOADING=false

# Enable support for saving and loading Isolate state to a suite file.
ENABLE_ISOLATE_MIGRATION=false

# Enable support for old channel-based GIU support
ENABLE_CHANNEL_GUI=false

# Enable SKVM
TRUSTED=false

# Enables the generated C version of the collector
VM2C=true

# Enables support for Object.finalize()
FINALIZATION=false

# Enable old inter-isolate message scheme
OLD_IIC_MESSAGES=false

# Use C version of findslot (for interface method invocation) in the interpreter
FAST_INVOKEINTERFACE=true

# Enable the "resource:" protocol
RESOURCE.CONNECTION=false

# flag from CLDC sources. CLDC uses #ifdef VERBOSE_EXCEPTIONS, squawk uses /*if[VERBOSE_EXCEPTIONS]*/
VERBOSE_EXCEPTIONS=false

# Enable JPDA debugger agent support
# Most debugger code is in sda module, but some support routines are in base Squawk
ENABLE_SDA_DEBUGGER=true

# If true, build as the UEI-compliant emulator launcher
EMULATOR_LAUNCHER=false


################# REAL_TIME FLAGS #######################
# Enable real-time subset
REAL_TIME=true

# if true, exclude items that we could easily support, but that aren't that useful,
# such as methods that accept clocks, schedulers, or monitor control policies (we only support one of each anyway)
# the point of this is determine the size of this clutter.
REAL_TIME_MINI=true

# if true, excludes items that we won't support initially becuase they are somewhat difficult.
# This includes Interruptable, Timed, and AIE. May include some scheduling parameters and
# feasability analysis support.
REAL_TIME_PROTO=true

# Enable full RTSJ 1.0 support. Update this so that:
# RTSJ1.0 = REAL_TIME & !(REAL_TIME_MINI | REAL_TIME_PROTO)
RTSJ1.0=false
