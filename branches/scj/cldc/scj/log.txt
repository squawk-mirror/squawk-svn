

       ===========          Memo          ===============

  
- A timer super thread is added for improving the reschedule granularity on 
  Mac OS platform. The timer periodically decreases the slept time of the
  TimerQueue by one tick until it reaches zero, which denotes at least
  one thread needs to be waken up. At that point, poll word is set, which
  will be checked at next call to pollCheck function. If the poll word is set,
  reschedule is performed.
  
  The "tick" can be adjusted but not set too small due to the overhead. So the
  reschedule granularity largely depends on how frequent the pollCheck is 
  called. The ideal way is to insert pollCheck at back branch and function
  entry point. However, doing pollCheck during VM kernel execution often
  leads to crash. 
  
  [[!!
    Unless we get a way to disable pollCheck when running in kernel, our 
  	approach does NOT work. 
  !!]]
  
- Scope checks: we need to do scope check when assigning one object to another's
  field for making sure no object references objects located in shorter living 
  BSs. The scope check for (obj1.f = obj2) is done in this way:
    - fast path: if addressOf(obj1) > addressOf(obj2), OK; 
                 else slow path
    - slow path: if BSof(obj1) == BSof(obj2), OK; 
                 else FAIL.

  The scope check is done as a write barrier along with updating reference 
  operation. For now, all reference updates are checked. However, we want
  a way to disable scope check for some updates, because scope rule has to be 
  violated sometimes for variety kinds of reasons and those violations are 
  known not to be able to cause any error in the end. e.g. checking BS pointer 
  manipulation must be disabled as the BS structures would not be in a consistent 
  status during then so the slow path would not work. Other examples include
  letting a thread wait for a monitor. Some of the references from the monitor 
  to all the waiting threads can be illegal; however, it is guaranteed that 
  a waiting thread will eventually detach itself from that monitor before it
  terminates (then dies).
  
  The current way to disable scope check is simple but inefficient and not
  thread safe: a static field, BackingStore.scopeCheckEnabled, is used as
  a switch, so for every assignment which is not supposed to be checked, one
  needs to surround it by BackingStore.disableScopeCheck()/enableScopeCheck()
  pair(, which is kind of ugly). 
  
  An ideal way would be to have a new annotation denoting whether a method or
  assignment expression should be checked or not. This makes the unnecessary
  check removed statically, which is still simple, no harm to performance, and
  not related to threading issue.
  
  [[!!
    We MUST: 
      1) disable all illegal assignments that are known to be safe. An illegal
         assignment is safe if all the references to a short live object will
         be explicitly nulled before the object dies. One example includes the
         hash tables used in Squawk. When an item becomes is dying, the entry
         will be removed explicitly so no dangling pointer will come up. We must
         be really careful to disable a check. We cannot disable it unless we
         are sure the assignment is safe in any cases.
      2) throw IllegalAssignmentError for the rests 
  !!]]  
  
  The currently known illegal assignments (just some of them have been disabled
  check.):
  
    * All of the static fields
        If the value is globally needed, should switch to immortal when allocating. 
        If temporarily needed (will not be read after the object dies), should 
        disable scope check for assignment.  

    com.sun.squawk.GC
      GarbageCollector collector
        - not used.
      SquawkHashtable  heapstats
        - unsafe:   Can be allocated anywhere, but only for debug
        - solution: Let it be
      ObjectMemory[]   readOnlyObjectMemories
        - not sure ...

    com.sun.squawk.JavaApplicationManager
      String classPath          
      String parentSuiteURI
      String testMIDletClass
        - all safe: Refer to strings in Immortal and never change.

    com.sun.squawk.Klass
      Klass           ADDRESS - VOID, klassClass
        - all safe: Refer to Klass instances in ROM.
      SquawkHashtable klassToClass 
        - unsafe:   Lazy-allocated in asClass(Klass). 
        - solution: Forced to be allocated in Immortal.
      KlassInitializationState initializationQueue
        - unsafe:   New queue node can be created in setInitializationState(VMThread) 
                    whenever a new class is going to be initialized. 
        - solution: Forced to be allocated in Immortal.

    com.sun.squawk.NativeUnsafe
      byte[]          memory
      byte[]          typeMap
      BitSet          oopMap
        - not sure: 
      SquawkHashtable unresolvedClassPointers
        - not sure: Seems to be used when hosted

    com.sun.squawk.ObjectMemoryLoader
      String filePathelements
        - safe: Refer to string in Immortal and never change.

    com.sun.squawk.ServiceOperation
      Throwable pendingException
        - unsafe for now: but with fully implemented SCJ exception handling, it should
          be safe.

    com.sun.squawk.SymbolParser
      SymbolParser      p1
      SymbolParser      p2
        - unsafe:   Created in create(byte[], Klass[]). 
        - solution: Forced to be allocated in Immortal.
      ByteBufferEncoder membersBuffer
      ByteBufferEncoder symbolsBuffer

    com.sun.squawk.VM
      Hashtable commandLineProperties
        - safe: Created before SCJ program starts; used to pass properties to Isolates. 
                It will become garbage after the Isolate is created.
      Isolate   currentIsolate
        - safe: There is only one Isolate, com.sun.squawk.JavaApplicationManager, throughout 
                the execution.
      String    isolateInitializer
        - safe: Created before SCJ program starts.
      Object       keyedGlobalsMutex
      IntHashtable keyeGlobals
        - unsafe: Lazily initialized in VM.getKeyedGlobalsMutex(); don't know how these two
                  fields are used
      Object    reportedArray
        - safe: Assigned and cleared right before ArrayIndexOutOfBoundsException is 
                going to be thrown.
      OutOfMemoryError     outOfMemoryError
        - safe: Initialized in at VM startup and never change.
      PeripheralRegistry   peripheralRegistry
        - unsafe: Lazily initialized in VM.getPeripheralRegistry(). Not familiar with this
                  part.
      SquawkHashtable      registeredMailboxes
        - unsafe: Lazily initialized in VM.registerMailbox(String, Mailbox). 
      CallbackManager      shutdownHooks
        - safe: Initialized in at VM startup and never change.
      WeakIsolateListEntry isolates
        - safe: There is only one Isolate.
      VMBufferDecoder      vmbufferDecoder
        - safe: Initialized in at VM startup and never change.

    com.sun.squawk.VMThread
      VMThread       currentThread
      VMThread       otherThread
      ThreadQueue    runnableThreads
      TimerQueue     timerQueue
        - safe: SCJ guarantees that a thread in a scope will definitely terminate before 
                the enclosing scope is reclaimed. And it is always true that a terminated 
                thread cannot be in any queues hence cannot be referenced by either 
                currentThread or otherThread since which will only be assigned with the 
                threads just being detached from a queue. So no dangling pointers would 
                show up regarding these fields.
      VMThread       serviceThread
      EventHashtable events
      EventHashtable osevents
        - safe: Permanent stuff initialized in VMThread.initializeThreading().
      SystemEvents   systemEvents
        - safe: Permanent stuff initialized in VMThread.initializeThreading2().


    * VMThread queues and monitors.
      

    * Mission.manager = MissionManager 
        Does not cause error. Scope check should be disabled.
      
    * Klass.klassToClass.entry = HashtableEntry
        The Class instance can be created lazily potentially everywhere but will 
        be cached in the hash table. This cause uncertainty of the assignment.
        
        Update: the creation of the hash table and entries has been made to happen
        in immortal. 
      
    * Assign to Timer.next / Timer.prev / TimerThead.head
        Timers are linked together. While most of the timers will be created in 
        mission memory, the NeverFireTimer is created in immortal. Trying to link
        them will cause illegal assignment, but will not cause error, because when
        a timer instance is about to die, it will be detached from the queue. 
            
    * IntHashtable / EventHashtable
        IntHashtable   VM.keyeGlobals
        EventHashtable VMThread.events
        EventHashtable VMThread.osevents
        
        It is generally safe to disable scope check for put() since the entry is 
        allocated when needed and removed when not. rehash() is bad in the sense
        that 1) it leaves the old table as garbage; 2) the new table will be 
        allocated in "current" scope which may be short lived.  
        
     * SquawkHashtable
     
       non-static reference:
       
       Isolate.monitorHashtable
       Isolate.internedStrings
       Isolate.childIsolates;
       Isolate.childThreads
       Isolate.mailboxAddresses
       Isolate.mailboxes
       Isolate.properties
       PeripheralRegistry.peripheralArraysByType
       Hashtable.delegate
       
       static reference:
         
       GC.heapstats
       Klass.klassToClass
       VM.registeredMailboxes
       ComputationTimer.flatTimes
       ComputationTimer.totalTimes
       Tracer._features
       
- Memory leak in immortal

  There should be methods leaking memory if no GC. Who are they?
  
  Need to check what data structures have been allocated dynamically. On 
  high level, we must make sure those data structures are of proper life 
  time and allocated in the proper scope, otherwise we have memory leak. 
  
  There are certainly temporary objects allocated in immortal memory during VM 
  starts up. Ideally, we should use object pool. But for now, just let it be 
  while keeping a list of them (not complete, will add more when found):

  Known leaking points:
  
    * IOHander
        A regular Java thread which is started along with the VM and blocked
        until a certain thread gets involved in some IO activities. At that
        conjunction, IOHander gets switched back in and in turn set the
        immortal as the allocation context (which is where it was switched 
        out). Apparently, any following allocation done by IOHandler cause 
        leak in immortal unless the created objects are intended to be kept 
        permanently. 
        
    * KlassInitializationState
        The entry becomes garbage after the klass has been fully initialized.
    
    * Enumerators / Iterators
        Of all types of collections who support them. e.g SquawkHashtable.
            
  
  To solve memory leak, we may want to introduce ScratchPad area alongside of
  immortal and scoped area. But how to decide the upper bound of size? And
  should users be aware of it?
         
    
- A limitation of SCJ Timer: simply ignores the clock field; assumes all time 
  are according to the realtime clock (get by calling Clock.getRealtimeClock()).
  This compromise simplifies the implementation: only one timer queue needs to 
  be maintained. The queue is sorted based on the target time of the timers. 
  For supporting other user defined clocks, one queue per clock is needed.

  
- Support to sleep until certain absolute time 
    
  RealtimeThread.sleep(HighResolutionTime) and HighResolutionTime.wait(Object, 
  HighResolutionTime) will do absolute sleep / wait, when getting an AbsoluteTime
  as parameter. We don't want to compute the delta to the current time by ourself 
  and call Thread.sleep(delta) since the error may accumulate. Just tell the VM
  when we want to wake up and let it do the math in an efficient way, e.g in native
  code or by utilizing some OS/hardware support if there are some.
  
  Partially done: VMThread.sleepAbsolute() and VMThread.monitorWaitAbsolute() are 
  added. They are used in RealtimeThread.sleep() and HighResolutionTime.waitForObject()
  respectively. However, the precision of VMThread.xxx is in millisecond while,
  the SCJ sleep/wait is in nanosecond. When converting, nano part is simply ignored.     











       ===========          DOCS          ===============

  = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  = The memory management of Squawk with SCJ extension  =
  = = = = = = = = = = = = = = = = = = = = = = = = = = = =    
  
  Pure SCJ should only use region-based memory management. But in order to save time,
  we just add things without removing anything.
  
  On top of the original memory layout, we add SCJ memory space which contains two
  sub-spaces: Immortal (IMM) and Scoped (SCP) as shown in Figure 1. The immortal space
  is used for immortal memory and the scoped space is for allocating all other bounded- 
  lifetime memory regions.
  
  RAM is originally used as heap which is not used in SCJ. NVM is not neither. For ROM,
  we treat it as immortal memory. 
  
  ---------------------------------------------------------
    Memory_start
      ROM:     treated as immortal
      RAM:     not used; should not contain any objects
      NVM:     not used; should not contain any objects
      IMM:     immortal space  (NEW!)
      SCP:     scoped   space  (NEW!)
      serviceStack
      argv copy
    Memory_end
  ---------------------------------------------------------
  Figure 1.
  
  
  Backing store (BS). We use term "scope" to refer to a memory region on high-level (from 
  the user's perspective), and use "backing store" to refer to the same thing on low-level.
  Basically, a scope may remain the same while its underlying backing store is changed.
  Furthermore, every realtime thread has a backing store which is dedicated to that thread.
  The backing store will not be reclaimed until the thread terminates. Details will be
  reached in following parts.
  
  The SCJ space is organized as backing store trees. Each node is a BS which contains two 
  pointers (allocStart / allocEnd) pointing to the low and high boundary addresses and a 
  top pointer (allocTop) to the top of allocated memory in the backing store, as shown in 
  Figure 2. Upon receiving a request of creating a BS with certain size, a memory space with 
  size of 
      
        real size = roundUpToWords(size) + sizeOf(BS instance)
        
  will be allocated. The BS instance is placed at the front of the memory space it owns.
  
  -----------------------------------------------------------      
  
    |-------------|  <- allocStart                ---
    | BS instance |                                |
    |-------------|  <- allocTop       --- 
    |             |                     |       real size
    | Free space  |                    size
    |             |                     |          |
    |-------------|  <- allocEnd       ---        ---
    
  ------------------------------------------------------------      
  Figure 2.
  
  
  Immortal (indexed 0) and Scoped (indexed 1) are the roots of trees. Since Immortal contains
  only one node, it is a leaf at the same time. Leaves correspond to user-level scopes, where 
  user code can allocate objects in, while non-leaves are invisible to users; they will be used 
  to allocate children BSs or other auxiliary objects. 
   
  Figure 3 shows an example BS trees. There is one active mission which consists of two
  threads (schedulable objects), which are in the stage where their initial private memories 
  (BS-5 and BS-6 respectively) have been entered. Besides that, thread 1 also entered a nested 
  private memory BS-7. Every child BS is allocated in its parent BS's space in a stack way. 
  The top BS is annotated with a star in the figure.
  
  In order to index BSs, there is an index table preceding a certain number of child BSs.
  They are shown in the layout figure with I. An index table contains an array holding
  references to the BSs following it. The capacity of the array would not change so when an
  index table is full, one other is created and linked to the tail of the index table queue. 
  In the example, the capacity is set to 2, so BS-4 is indexed by a second table.
  
  Index tables are used in searching (by binary search) the enclosing BS of an memory address.
  In practice, we don't want too many index tables to be created (at best just one) since this 
  will harm the searching performance, since the binary search can only be done in per-table 
  basis. The complexity of across tables searching part is linear.
  
  An index table is reclaimed as the last one BS it indexes is reclaimed. So allocation and
  reclamation of such BS would incur extra overhead.
  
  -----------------------------------------------------------------------------------------      
    |* Correspondence *|
    
    BS-0     Immortal         (leaf)
    BS-1     Scoped
      BS-2     mission memory (leaf)
      BS-3     backing store for thread 1
        BS-5     private 0    (leaf)
        BS-7*    private 1    (leaf)
      BS-4*    backing store for thread 2
        BS-6*    private 0    (leaf)
        
   
    |* Layout in memory, address grows towards right *|
    
      ROM   Heap      BS-0                              BS-1
    |-----|------|------------|--------------------------------------------------------|
                               I  BS-2              BS-3            I    BS-4*               
                              |-|------|---------------------------|-|-----------|     |
                                        I  BS-5   BS-7*               I  BS-6*
                                       |-|------|------|           | |-|------|  |     |    
                                     
  -----------------------------------------------------------------------------------------      
  Figure 3.                                     
  
  The current way of BS management is not complicated in general, but there is a much simpler 
  way as long as the platform's memory resource is not restricted: organizing and allocating 
  the memory in page basis and maintaining a map from page numbers to BSs for BS searching. 
  The searching complexity drops to constant. This mean is not suitable for small memory  
  environment (~ hundreds of KB) because where the page size must be relatively small, 
  consequently the map itself becomes negligible in terms of size.  
  
  
  - Allocating process: new -> GC.allocatePrim() -> BackingStore.allocate()

- Current allocating context is hold by BackingStore; VMThread has a field 
  called "savedAllocCtx", which is used to save the current allocating 
  context for the current thread which will be switched out immediately.

- Immortal and Scoped are seen as RAM during SCJ execution, so we put the 
  check in GC.inRam(Object) as well and return true if the object is in 
  Immortal or Scoped.

- ObjectAssociation / Monitor allocation - two choices:
  1) allocate along with the object - space wasting
  2) allocate upon required at the scope where the object is allocated 
     - overhead: search for and switch allocation context (done)

- Class state allocation - two choices:
  1) pre-allocate in immortal memory before user program starts to run 
  2) allocate upon required in immortal memory (done)
  
- Implementing BackingStore.getBackingStore(Object) in an efficient
  way; for now it is done by simply searching for the BS enclosing the 
  address of the object. The search time can be decreased by:
  1) add BS pointer to object header
  2) make BS organization support binary search. (done)     
  
  
  
  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  = The External Event of Squawk with SCJ extension  (plan) =
  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   
  
  1. VM events
  
  The category of events is platform and VM dependent. Typically, events refer to interrupts, 
  signals, messages, etc. The VM vendor is responsible to document the list of supported events
  and specify the way to identify them, e.g. associate each event with an unique ID. 
  
  
  2. SCJ happenings
  
  The counterpart of VM events in SCJ is happenings. By defining a happening, the user program 
  defines the response to an certain VM event.
  
    1) EventHappening
      This happening can be associated with an AsyncEvent (or multiple, not clear in SCJ Spec), 
      which will be fired (hence the handlers are invoked) upon the event happens.   
  
    2) InterruptHappening
      This happening comes with a process() method, which should be implemented by user code as
      the interrupt handling logic. The method will be invoked upon the interruption occurs. 
      
  In short, the handlers of EventHappening are asynchronous while those of InterruptHappening are
  synchronous.
  
  For the reserved events, such as clock interrupt, users are not allowed to provide their own 
  happenings. Every reserved event has a default one.
  
  The SCJ Spec does not specify how to associate a happening to an event. For our implementation,
  we can assume an event and a happening are associated if sharing the same integer ID. Besides 
  having the right ID, a happening needs to be registered (by Happening.register()) as well for 
  being connected the event.
  
      
  3. The event handling model
  
  Following items are taken from SCJ Spec; my questions followed if there are some:
  
  * Both first-level and second-level interrupt handlers are supported.
  
    Questions:
  
    1) By what way a user can specify the interrupt handler's level?
    
    2) The first level handler requires to be executed strictly immediately after the interrupt
       occurs, which requires that Squawk can be preempted at any time. However, preempting the
       VM arbitrarily can leave the VM in an inconsistent status. I don't see how to support first 
       level handler in Squawk.
       
    Decision: 
    
    1) Postpone the implementation of the first-level interrupt handler support.
    
  
  * An occurrence of an external event consists of its generation and delivery.
  
  * Generation of the external event is the mechanism in the underlying hardware, real-time JVM 
    or system that makes the external event available to the Java program.
  
  * Delivery is the action that invokes the associated trigger method in response to the occurrence 
    of the external event. This may be performed by the JVM or application native code linked with 
    the JVM.
    
    Questions:
  
    1) Not sure what it means by allowing an application native code to control the delivery of an 
       event.
        
    Decision: 
    
    1) Let the VM deliver events.
    
  * Between generation and delivery, the external event is pending.

  * Some or all external event occurrences may be inhibited. When an external event occurrence is 
    inhibited, all occurrences of that event are prevented from being delivered. Whether such 
    occurrences remain pending or are lost is implementation defined.
    
    Questions:
    
    1) What is the duration of an event being inhibited? For 
    
    Decision:
    
    1) We do not need event inhibition feature as long as the delivery action is not done in parallel,
       because event inhibition is invented to avoid nested occurrence of an event, while sequential 
       delivery will not incur nested occurrence in nature.

  * An exception propagated from a trigger method that is invoked by an external handler results in 
    the uncaughtException method being called in the associated ManageInterruptHandler class.

       
       
  4. Other details about implementation required to be documented
   
  1) For each external event, whether it can be inhibited or not, and the effects of attaching Happenings 
     to non inhibitable external events (if this is permitted)
     
     A: feature not supported
     
  2) Which run-time stack the trigger method uses when it executes; if this is configurable, what is the 
     mechanism to do so; how to specify how much space to reserve on that stack.
     
     A: for simplicity, the runtime stack is the one of the thread which is polling
      
  3) Any implementation- or hardware-specific activity that happens before a user-defined happenings gets 
     control (e.g., reading device registers, acknowledging devices).
     
     TBD 

  4) The state (inhibited/uninhibited) of the non-reserved external events when the program starts; if some 
     external events are uninhibited, what is the mechanism a program can use to protect itself before it 
     can register the corresponding Happening.
     
     A: feature not supported

  5) The treatment of external event occurrences that are generated while the external event is inhibited; 
     i.e., whether one or more occurrences are held for later delivery, or all are lost.
     
     A: feature not supported

  6) Whether predefined or implementation-defined exceptions are raised as a result of the occurrence of 
     any external event (for example, a hardware trap resulting from a segmentation error), and the mapping 
     between the external event and the predefined exceptions.
     
     TBD 

  7) On a multi-processor, the rules governing the delivery of an external event occurrence to a particular 
     processor.
  
     TBD
     
  
  5. Interrupt handler priority
  
  "SCJ also defines the notion of interrupt priorities. Interrupt priorities can only be used to define 
  ceiling priorities." - from SCJ Spec
  
  Not much words about this issue. Presumably, SCJ would completely adapt Ada's model, in which handler 
  procedures must be "protected" (analogous to synchronized method in Java) and the priority of the handler 
  is used to specify the ceiling of the protected object (the receiver object of the synchronized method in 
  Java). Therefore when the handler starts, its thread's priority will be raised up to the ceiling.
  
  To support this feature, we need priority ceiling protocol to be implemented first. For now, just ignore 
  the priority.
  
  
    
  6. Implementation
    
    == Algorithms ==
  
    Data structures:
      pendQ:  a queue of pending events
      hapMap: a table mapping each event to its happening set 
      
    1) Event Generation (in native code):
      WHEN event e occurs
        pendQ.add(e)
        
    2) Event Delivery (VM poll):
      FORALL e IN pendQ
        pendQ.remove(e)
        Happening.trigger(e)
   
    3) Happening.trigger(e):
      happenings = hapMap.get(e)
      IF empty(happenings)
        return false 
      FORALL h IN happenings 
        IF h instanceof EventHappening
          TriggerThread.add(h)
        ELIF h instanceof InterruptHappening
          h.process()
        ELSE
          error()
      return true
  
    4) TriggerThread
      FORALL h IN happenings
        h.asyncEvent.fire()
        // if associating multiple AsyncEvents is supported, fire all of them
        
    == Explanation ==

    Since current VM only support I/O events, we need to have new native code to monitor the events generated from
    hardware/OS. When an event is generated, add it to the pending queue. We can use "eventRequests" queue in 
    io_native.c directly as the pending queue. When an new event comes up, create a new EventRequest and call 
    signalEvent() on it.
    
    We should use negative integers as the SCJ event ID for avoiding conflicting with the current event number 
    space. The pending events are delivered at VM poll. 
    
    
  7. Problems
          
    The SCJ Spec says that users CAN unregister the happenings at mission.cleanUp(). However, they are not 
    mandatory to do that. So the problem is what if there are some happening left registered after the mission.
          
    Leaving some registered happening in the gap between missions can be dangerous since their handlers might be 
    gone along with the mission. Before everything is clarified, we simply unregister all happenings belongs to 
    current mission.
          
    Actually, this is still a hole: can a happening span missions? If yes, how to ensure the happening will not 
    hold some dead reference? Particularly, ManagedAutonomousHappening can be attached with a AsyncEvent. What 
    if the AsyncEvent object dies with the mission, while the happening is still alive?
  
    [[!!
      NOTE: Executing user happening handler code in rescheduleNext() is NOT SAFE. The danger results from an
      invariant violation:
      
      In user code's point of view, current thread should not be in any queues. 
      
      In the context of rescheduleNext(), this invariant does not hold since prior to the entrance, some other 
      scheduling related code often have done putting the current thread in a proper queue. Therefore, executing 
      user code in such context is dangerous. One case that can cause a crash is as following:  
      
      - put currentThread in some queue
      - rescheduleNext()
        - user happening handler
          - put currentThread in some queue <-- here, currentThread.checkInQueue(Q_NONE) will fail!  
    !!]]
    
    
    
  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  =            Class Pre-initialization  (plan)             =
  = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =   

  1. Overview
  
  Since no dynamic class loading is allowed in SCJ, the classes are required and possible to be pre-initialized
  in immortal memory.
  
  In order to save memory, ideally only the actually used classes need to be initialized. So we assume that the 
  list of such classes can be obtained somehow, e.g. by using static analysis tools. The classes on the list
  are going to be initialized in particular (e.g. alphabetic) order.
  
  Problem: since different order of initialization generates different result for certain cases. How to guarantee
  user-intended order? 
  
  2. Procedure
  
  Procedure is adapted from http://java.sun.com/docs/books/jvms/second_edition/html/Concepts.doc.html#24237, 
  section 2.17.5 Detailed Initialization Procedure. Essentially, all synchronization and thread-related judgments 
  have been removed from the original procedure.

  States of the class object:
    - This Class object is not initialized.
    - This Class object is being initialized.
    - This Class object is fully initialized.
    - This Class object is in an erroneous state. 

  The procedure for initializing a class or interface is then as follows:

  (del)  1) Synchronize on the Class object that represents the class or interface to be initialized. This involves 
            waiting until the current thread can obtain the lock for that object.

  (del)  2) If initialization by some other thread is in progress for the class or interface, then wait on this Class 
            object (which temporarily releases the lock). When the current thread awakens from the wait, repeat this 
            step.

   3) If initialization is in progress for the class or interface by the current thread, then this must be a recursive 
      request for initialization. Complete normally.

   4) If the class or interface has already been initialized, then no further action is required. Complete normally.

   5) If the Class object is in an erroneous state, then initialization is not possible. Throw a NoClassDefFoundError.

   6) Otherwise, record the fact that initialization of the Class object is now in progress.

   7) Next, if the Class object represents a class rather than an interface, and the direct superclass of this class has 
      not yet been initialized, then recursively perform this entire procedure for the uninitialized superclass. If the 
      initialization of the direct superclass completes abruptly because of a thrown exception, then label it erroneous, 
      complete abruptly, throwing the same exception that resulted from the initializing the superclass.

   8) Next, execute either the class variable initializers and static initializers of the class or the field initializers 
      of the interface, in textual order, as though they were a single block, except that final static variables and fields 
      of interfaces whose values are compile-time constants are initialized first.

   9) If the execution of the initializers completes normally, then label it fully initialized and complete this procedure 
      normally.

  10) Otherwise, the initializers must have completed abruptly by throwing some exception E. If the class of E is not Error 
      or one of its subclasses, then create a new instance of the class ExceptionInInitializerError, with E as the argument, 
      and use this object in place of E in the following step. But if a new instance of ExceptionInInitializerError cannot 
      be created because an OutOfMemoryError occurs, then instead use an OutOfMemoryError object in place of E in the 
      following step.

  11) Label it erroneous and complete this procedure abruptly with reason E or its replacement as determined in the previous 
      step. 
      
  3. Some implementation details:
  
  1) KlassInitializationState instances can be placed in some scratchpad memory area, which subjects to reclamation after
  finishing all the class initialization.
  
  
  
  
       ===========          TODO          ===============

  [[!!
    IMPORTANT: we must fully know what a method does if we need to call them in 
    scoped memory, because a method can potentially:
      1) allocating (which means leaking memory under GC-absent environment)
      2) doing illegal assignments  
    For 1), we must make sure the allocation is necessary and user-awared;
    For 2), make sure no dangling pointer will actually occur and annotate it.
  !!]]

- Pre-initialize all used classes.
  Problem: the order of initialization matters when there is recursion in the 
  initialization process. How to ensure that we obey the user-intended order?

- Add SCJ options to builder

  For now, we start the SCJ instead of Midlet launcher simply by replacing 
  the original value of Isolate.MIDLET_WRAPPER_CLASS with 
  com.sun.squawk.scj.SafeletLauncher. And also, the Safelet class name is 
  hard coded in SafeletLauncher. We may want to do the SCJ startup process 
  more elegantly by extending the builder ...


- Monitor object allocations are triggered when printing. Check why??


- Scheduling performance improvement:
  - separated priority queue?
  - delta timer queue?
  - RTC interrupted rescheduling?
  
  Solution:
    - the sleeping thread queue is maintained as a delta queue (dQ); the unit of 
      delta is "tick"
    - a timer (ISR or supervisor thread) decrease the dQ.head by one tick. If 
      dQ.head == 0, set reschedule word
    - at poll check,
        if reschedule word set, do reschedule
  

- Priority Ceiling Emulation Implementation


- Need to have priority levels >= 28


- Exception handling

  the exception object is still allocated in the scope where the exception
  happens. SCJ instead requires to allocate in a dedicated thread local 
  space, which we do not have yet for now.
 
- Translate BackingStore.allocate() to C

  Otherwise, object allocation would be 20x slower.
    
  
- Test, Test, Test ! 


- Example, Example, Example !

- Happenings
  
  reserved happenings [name, id]   
   
     